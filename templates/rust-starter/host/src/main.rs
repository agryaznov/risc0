//! This is an example [host program] generated from [RISC Zero Starter Template].
//!
//! # Program Structure
//!
//! In order to produce and verify a [validity proof]:
//!
//! 1. Build an executor environment which describes the configurations for the [`zkVM`][`risc0_zkvm`],
//!    including the [guest program] inputs.
//!
//!    A default [`ExecutorEnv`] can be created with:
//!    ````
//!    let env = ExecutorEnv::builder().build().unwrap();
//!    ````
//!
//!    However, default environment does not have any inputs.
//!    To add [guest program] input to the executor environment, use builder to construct it like this:
//!    ```
//!    // Provide input to guest program.
//!    let input: u32 = 15 * u32::pow(2, 27) + 1;
//!    let env = ExecutorEnv::builder().write(&input).unwrap().build().unwrap();
//!    ```
//!
//! 2. Call [`risc0_zkvm`] prover with the provided environment and guest program ELF file, to produce the reciept.
//! 3. Retrieve the receipt journal file.
//!    `This step is to be done by the reader for educational purposes`.
//! 4. Verify the receipt by calling into special method with providing `image_id`.
//!
//! (Jump into [crate::main] function source for details).
//!
//! [host program]: https://dev.risczero.com/terminology#host
//! [validity proof]: https://dev.risczero.com/terminology#validity-proof
//! [guest program]: https://dev.risczero.com/terminology#guest
//! [RISC Zero Starter Template]: https://github.com/risc0/risc0/tree/release-0.19/templates/rust-starter

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    {{guest_elf}}, {{guest_id}}
};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    let input: u32 = 15 * u32::pow(2, 27) + 1;
    let env = ExecutorEnv::builder().write(&input).unwrap().build().unwrap();
    // Obtain the default prover.
    let prover = default_prover();
    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, HELLO_GUEST_ELF).unwrap();

    // Extract the journal from the receipt
    let output: String = receipt.journal.decode().unwrap();

    // Print the extracted output
    println!("Yay, I generated a proof of guest execution! \"{}\" is the public output from the journal.", &output);

    // The receipt was verified at the end of proving. We give the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify({{guest_id}}).expect("Receipt verification failed!");
}